
include "getARGV.idp" 

func Pk=P1;
// Parameters
real tau =getARGV("-tau", 0.01);
cout<<"tau in FF++" <<tau<<endl;
load "iovtk"

int[int] Order=[1];
 // Mesh 140 
 int nnref=getARGV("-nnref", 20);
 int nn =nnref;

cout <<" size mesh in FF++"<<nn<<endl;


mesh Th = square(nn,nn);
/*
if (nnref==7){

Th=trunc(Th,x>=0.39);
Th=trunc(Th,x<=0.61);
Th=trunc(Th,y>=0.39);
Th=trunc(Th,y<=0.61);
plot(Th,wait=1);
}else{
Th=trunc(Th,x>=0.4);
Th=trunc(Th,x<=0.6);
Th=trunc(Th,y>=0.4);
Th=trunc(Th,y<=0.6);
plot(Th,wait=1);
}
*/
// Theta param


plot(Th,wait=1);
/* if (nnref==7){

Th=trunc(Th,x>=0.19);
Th=trunc(Th,x<=0.81);
Th=trunc(Th,y>=0.19);
Th=trunc(Th,y<=0.81);
plot(Th,wait=1);
}else{
Th=trunc(Th,x>=0.2);
Th=trunc(Th,x<=0.8);
Th=trunc(Th,y>=0.2);
Th=trunc(Th,y<=0.8);
plot(Th,wait=1);
}
*/
// Theta param
real theta=getARGV("-theta",1.); //theta=1;//Euler 0.5// CN

// NIRB PARAMETER
real mu1=getARGV("-Param1", 1.);
real mu2=getARGV("-Param2", 1.);
cout<<"Param in FF++"<<mu1<<" "<<mu2<<endl;

fespace Vh(Th, Pk);
cout<<Vh.ndof<<endl;
 Vh u, v, oldU;
Vh f1, f0;
fespace Ph(Th, P0);
Ph h = hTriangle; // mesh sizes for each triangle

//Function
 func real f (real t){
     return (t-y^2/2+y^3/3)*(t+x^2/2-x^3/3) -(1-2*x)*(t-y^2/2+y^3/3)-(-1+2*y)*(t+x^2/2-x^3/3)+(t+x^2/2-x^3/3)+(t-y^2/2+y^3/3);
 }

int FineRef=getARGV("-FineRef", 0);
u=0;
oldU=(x^2/2-x^3/3)*(-y^2/2+y^3/3);
cout << "mesh size = " << h[].max << ", time step = " << tau << endl;
problem aTau (u, v)
    = int2d(Th)(
          u*v
        +  theta*tau*(mu1*dx(u)*dx(v) +mu2* dy(u)*dy(v) + u*v)
    )
    - int2d(Th)(
          oldU*v
        - (1-theta)*tau*(mu1*dx(oldU)*dx(v) + mu2*dy(oldU)*dy(v) + oldU*v)
    )
    - int2d(Th)(
         tau*(theta*f1 + (1-theta)*f0)*v
    )
    ;

     real t0 = 0;
     real t0bis =0;// 0.9999;
     real T = 1.0001;
     real t=t0;
    // oldU = 0;
    // func real ff2 (real t){
    // return  - 10*(t+1)*((12*x^2-12*x+2)*(y^2*(y-1)^2)+(12*y^2-12*y+2)*(x^2*(x-1)^2));
//}

   //  f0=ff2(0);
    // problem condiniU(oldU,v)=int2d(Th)((dx(oldU)*dx(v) +dy(oldU)*dy(v))) - int2d(Th)(f0*v)+ on(1,2,3,4,oldU=0);
    // condiniU;
     u[]=oldU[];
     
     cout << "theta" << ":"<<theta<<endl;

     if(FineRef==0){
	savevtk("Snapshoth_"+0+".vtu",Th,oldU,dataname="Velocity",order=Order);
     }
     else{
     {
     ofstream fileSnap("Snapshoth_0.txt");
     fileSnap<< oldU[];
     }
     }
     
     int n=0;
     	 
	 func uex =(t+x^2/2-x^3/3)*(t-y^2/2+y^3/3);
	 func dxuex =(x-x^2)*(t-y^2/2+y^3/3);
	 func dyuex =(-y+y^2)*((t+x^2/2-x^3/3));
	 
	 
	 //cout<<"MAX"<<err[].max<<endl;
     real locL2=0;//sqrt(int2d(Th)((u-uex)^2)/int2d(Th)(uex^2));
     cout<<"***** ERR relative L2: "<<locL2<<endl;

     real locH1=0;//sqrt(int2d(Th)((dx(u)-dxuex)^2+(dy(u)-dyuex)^2)/int2d(Th)(dxuex^2+dyuex^2));
     cout<<"***** ERR relative H1: "<<locH1<<endl;
     

     for (t=t0+tau; t <= T; t=t+tau){
	 f0 = f(t-tau);
         f1 = f(t);
	 
     	 cout<<"T : "<<t;
	
	  
         aTau; //solve problem
	 Vh usol=uex;   
	 Vh err=u-usol;//uex;	 
	 cout<<"linf"<<abs(err[].max)/abs(usol[].max) << ","<<endl;
	 real locL2o=sqrt(int2d(Th)((u-uex)^2)/int2d(Th)(uex^2));
	 cout<<"***** ERR relative L2: "<<locL2o<<endl;

	 real locH1o=sqrt(int2d(Th)((dx(u)-dxuex)^2+(dy(u)-dyuex)^2)/int2d(Th)(dxuex^2+dyuex^2));
	 cout<<"***** ERR relative H1: "<<locH1o<<endl;


	 plot(u,wait=1,cmm="u");
	 plot(usol,wait=1,cmm="uex");
	 oldU = u;
	  
         //save
	 if (t>=t0bis){ //solution entre t0=1 et t1=2	 
	
	 real mn=n+1;

    	 if(FineRef==0){
	 savevtk("Snapshoth_"+mn+".vtu",Th,u,dataname="Velocity",order=Order);
     	}
     else{
     {
      ofstream fileSnap("Snapshoth_"+mn+".txt");
     	   fileSnap << u[];
     }
     }
     
	   
	  locL2=max(locL2,locL2o);
	 locH1=max(locH1,locH1o);
	   n++;
	 }
}
   
    cout << endl;
    cout<< "nev: " << " nnref "<<nnref <<"tau "<< tau<<endl;

         
    cout << endl;
    cout<< "nev: " << " nnref "<<nnref <<"tau "<< tau<<endl;
    cout<<" LOC L2 " << locL2<<endl;
    cout<<" LOC H1 "<<locH1<<endl;
        